Banco de dados

O banco de dados pode estar presente em qualquer lugar e independente do uso de tecnologia da informação.

Exemplos
Caderno
Lista telefonica
Agenda

definição de banco de dados:coleção de dados persisntentes (a ideia de dados persistentes usada pelos sistemas de informação de uma determinada empresa) usada pelos sistemas de informação de uma determinada empresa.

POSTGRESQL:que pode ser considerado um sistema gerenciador de banco de dados.

SGBD (isola os usuarios dos detalhes do nivel de hardware, ou seja, nós vamos fazer a interação do banco de dados por meio do SGBD, utilizando a linguagem SQL:que fara o tratamento de requisições inclusões, alteração, consultas e exclusão. 


tipos de variaveis: integers <- numero inteiro

varchar e char <- caractere, o varchar armazenara no disco tudo digitado, e o char armazena no disco mas caso não esteja completo ele completa com espaços.

text <- texto livre

constraint (restrição)

numeric <- o numeric você tera dois numeros e utilizara a variavel da seguinte forma  EX: "numeric(10, 5)", o primeiro numero tera dez casas e apos a virgula, o segundo tera cinco casas. 
 
pk_ <- primary key (chave primaria, o campo unico que não pode ser repetido)

EXEMPLO: constraint pk_(algum nome)_(nome da variavel) primary key (nome da variavel que não sera repetida) e se tornara chave primaria

unique <- funciona igual a chave primaria, mas ela não é chave primaria, mas ira restringir o campo que tera esse comando utilizado

EX:constraint unk_prof unique (prof)

Drop Table (nome da tabela) ira excluir sua tabela

not null <- exige que o campo seja preenchido caso contrario dara erro

varchar ira armazenar o numero de letras que você colocar

char ira preencher com espaço caso você não coloque todas as letras

caso você ja tenha executado e ter inserido outra parte ao codigo dara erro, por isso selecione a outra parte inserida e aí sim rode.

caso de erro nas suas "atualizaões da tabela" você tera que renomear o que ser pedido

SHIFT + ALT + SETA PRA BAIXO = clona a ultima linha

Alter table <- muda a estrutura da tabela

Rename <- renomeia 

column <- seleciona a coluna

to <- para

type <- tipo

drop <- apagar um campo

lembre do where

Utilize estes comandos juntos

ex:alter table cliente rename column profissao to idprofissao

obs:alem de column pode ser usado junto

add <-adiciona um novo campo a tabela

ex: alter table cliente add numero

chave dourada é primaria e chave prata estrangeira

in <- insere tudo

ex: in (1, 2, 3, 4)

No SQL, o tipo de dado FLOAT é utilizado para armazenar números de ponto flutuante, que são números com casas decimais. Diferente dos tipos inteiros, que armazenam apenas números inteiros (sem decimais), o FLOAT pode representar números muito grandes ou muito pequenos, com um determinado grau de precisão.

Por exemplo, um valor como 123.456 seria armazenado em uma coluna do tipo FLOAT. Ele é especialmente útil quando você precisa de precisão em cálculos matemáticos, mas não necessariamente uma precisão exata como a oferecida pelo tipo DECIMAL.

Aqui estão algumas características importantes do FLOAT:o float aceita um limite pequeno de numeros para colocar numero com , e ele ocupa 10 espaços na memória aproximadamente, o DOUBLE dobra este valor.


complementos:

Os tipos de dados DOUBLE, NUMERIC e FLOAT em SQL são usados para armazenar números, mas têm diferenças importantes em termos de precisão, armazenamento e uso. Vou explicar as diferenças e restrições de cada um:
1. DOUBLE

    Descrição: DOUBLE (ou DOUBLE PRECISION) é um tipo de dado que representa números de ponto flutuante com precisão dupla. Ele usa 64 bits para armazenar o valor.
    Precisão: A precisão de um DOUBLE depende da implementação do banco de dados, mas geralmente oferece uma precisão de cerca de 15 a 17 dígitos decimais.
    Uso: É utilizado quando é necessário trabalhar com números muito grandes ou muito pequenos que requerem uma alta precisão, como em cálculos científicos.
    Restrições: Devido à natureza dos números de ponto flutuante, o DOUBLE pode sofrer de problemas de arredondamento, o que pode resultar em pequenas imprecisões. Não deve ser usado quando é necessária uma precisão exata, como em valores monetários.

2. NUMERIC

    Descrição: NUMERIC (ou DECIMAL) é um tipo de dado que representa números exatos. Ele permite especificar a quantidade de dígitos totais e a quantidade de dígitos após o ponto decimal.
    Precisão: A precisão é definida pelo usuário ao declarar o tipo. Por exemplo, NUMERIC(10, 2) armazena um número com até 10 dígitos, sendo 2 deles após o ponto decimal.
    Uso: É usado quando a precisão exata é necessária, como em cálculos financeiros onde números devem ser exatos.
    Restrições: O NUMERIC pode ocupar mais espaço em disco comparado ao FLOAT ou DOUBLE, especialmente se for especificada uma precisão muito alta. Além disso, as operações com NUMERIC podem ser mais lentas devido à necessidade de manter a precisão exata.

3. FLOAT

    Descrição: FLOAT é outro tipo de dado que representa números de ponto flutuante, mas com precisão simples. Ele usa 32 bits para armazenar o valor.
    Precisão: A precisão de um FLOAT é menor do que a de um DOUBLE, geralmente em torno de 7 dígitos decimais.
    Uso: É utilizado quando a memória é uma preocupação e uma precisão mais baixa é aceitável. É útil em aplicações onde uma precisão exata não é tão crítica.
    Restrições: Assim como o DOUBLE, o FLOAT pode ter problemas de arredondamento e imprecisões. Não é adequado para armazenar valores que requerem precisão exata.

Resumo das Restrições:

    DOUBLE e FLOAT: Não são recomendados para cálculos financeiros ou outros usos onde a precisão exata é crucial devido a possíveis imprecisões de arredondamento.
    NUMERIC: Garante precisão exata, mas pode ser mais lento e consumir mais espaço em comparação com FLOAT e DOUBLE.


